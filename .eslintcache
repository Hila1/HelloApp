[{"C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\index.tsx":"1","C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\reportWebVitals.ts":"2","C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\App.tsx":"3","C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\bundle\\DrillData\\DrillData.tsx":"4","C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\services\\exposureSocket.ts":"5","C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\instances\\i18next.js":"6","C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\bundle\\Login\\Login.tsx":"7","C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\services\\socketIo.ts":"8","C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\lib\\constants.js":"9","C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\services\\keepAliveSocket.ts":"10","C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\bundle\\Dashboard\\Dashboard.tsx":"11","C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\bundle\\TimerComponent\\TimerComponent.tsx":"12","C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\services\\checkOutSocket.ts":"13","C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\services\\checkInSocket.ts":"14","C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\services\\changeDrillStateSocket.ts":"15","C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\bundle\\Debug\\Debug.tsx":"16","C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\bundle\\Debug\\DebugTargets\\DebugTargets.tsx":"17","C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\bundle\\Debug\\DebugExposures\\DebugExposures.tsx":"18","C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\bundle\\Debug\\DebugSoldiers\\DebugSoldiers.tsx":"19","C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\bundle\\Debug\\DebugDrills\\DebugDrills.tsx":"20","C:\\Users\\hila.shapira\\hello\\helloChat\\BulletApp\\src\\index.tsx":"21","C:\\Users\\hila.shapira\\hello\\helloChat\\BulletApp\\src\\reportWebVitals.ts":"22","C:\\Users\\hila.shapira\\hello\\helloChat\\BulletApp\\src\\App.tsx":"23","C:\\Users\\hila.shapira\\hello\\helloChat\\BulletApp\\src\\instances\\i18next.js":"24","C:\\Users\\hila.shapira\\hello\\helloChat\\BulletApp\\src\\bundle\\Dashboard\\Dashboard.tsx":"25","C:\\Users\\hila.shapira\\hello\\helloChat\\BulletApp\\src\\bundle\\Login\\Login.tsx":"26","C:\\Users\\hila.shapira\\hello\\helloChat\\BulletApp\\src\\bundle\\Debug\\Debug.tsx":"27","C:\\Users\\hila.shapira\\hello\\helloChat\\BulletApp\\src\\bundle\\DrillData\\DrillData.tsx":"28","C:\\Users\\hila.shapira\\hello\\helloChat\\BulletApp\\src\\bundle\\Debug\\DebugExposures\\DebugExposures.tsx":"29","C:\\Users\\hila.shapira\\hello\\helloChat\\BulletApp\\src\\bundle\\Debug\\DebugTargets\\DebugTargets.tsx":"30","C:\\Users\\hila.shapira\\hello\\helloChat\\BulletApp\\src\\bundle\\Debug\\DebugDrills\\DebugDrills.tsx":"31","C:\\Users\\hila.shapira\\hello\\helloChat\\BulletApp\\src\\bundle\\Debug\\DebugSoldiers\\DebugSoldiers.tsx":"32","C:\\Users\\hila.shapira\\hello\\helloChat\\BulletApp\\src\\lib\\constants.js":"33","C:\\Users\\hila.shapira\\hello\\helloChat\\BulletApp\\src\\services\\keepAliveSocket.ts":"34","C:\\Users\\hila.shapira\\hello\\helloChat\\BulletApp\\src\\services\\checkOutSocket.ts":"35","C:\\Users\\hila.shapira\\hello\\helloChat\\BulletApp\\src\\services\\exposureSocket.ts":"36","C:\\Users\\hila.shapira\\hello\\helloChat\\BulletApp\\src\\services\\checkInSocket.ts":"37","C:\\Users\\hila.shapira\\hello\\helloChat\\BulletApp\\src\\services\\changeDrillStateSocket.ts":"38","C:\\Users\\hila.shapira\\hello\\helloChat\\BulletApp\\src\\services\\socketIo.ts":"39"},{"size":457,"mtime":1612271145260,"results":"40","hashOfConfig":"41"},{"size":425,"mtime":499162500000,"results":"42","hashOfConfig":"41"},{"size":2050,"mtime":1618214743976,"results":"43","hashOfConfig":"41"},{"size":18889,"mtime":1622032169554,"results":"44","hashOfConfig":"41"},{"size":619,"mtime":1613566229837,"results":"45","hashOfConfig":"41"},{"size":4889,"mtime":1618214743995,"results":"46","hashOfConfig":"41"},{"size":5028,"mtime":1618214743995,"results":"47","hashOfConfig":"41"},{"size":534,"mtime":1613566165128,"results":"48","hashOfConfig":"41"},{"size":882,"mtime":1622032277993,"results":"49","hashOfConfig":"41"},{"size":539,"mtime":1612687906738,"results":"50","hashOfConfig":"41"},{"size":3283,"mtime":1617701629879,"results":"51","hashOfConfig":"41"},{"size":1626,"mtime":1617520314217,"results":"52","hashOfConfig":"41"},{"size":538,"mtime":1613898525671,"results":"53","hashOfConfig":"41"},{"size":549,"mtime":1617520314217,"results":"54","hashOfConfig":"41"},{"size":595,"mtime":1617520314217,"results":"55","hashOfConfig":"41"},{"size":2014,"mtime":1618214743984,"results":"56","hashOfConfig":"41"},{"size":3924,"mtime":1618214743995,"results":"57","hashOfConfig":"41"},{"size":3981,"mtime":1620128200744,"results":"58","hashOfConfig":"41"},{"size":3568,"mtime":1618214743995,"results":"59","hashOfConfig":"41"},{"size":3780,"mtime":1618214743984,"results":"60","hashOfConfig":"41"},{"size":457,"mtime":1612271145260,"results":"61","hashOfConfig":"62"},{"size":425,"mtime":499162500000,"results":"63","hashOfConfig":"62"},{"size":2050,"mtime":1618214743976,"results":"64","hashOfConfig":"62"},{"size":4889,"mtime":1618214743995,"results":"65","hashOfConfig":"62"},{"size":3283,"mtime":1617701629879,"results":"66","hashOfConfig":"62"},{"size":5028,"mtime":1618214743995,"results":"67","hashOfConfig":"62"},{"size":2014,"mtime":1618214743984,"results":"68","hashOfConfig":"62"},{"size":18889,"mtime":1622032169554,"results":"69","hashOfConfig":"62"},{"size":3981,"mtime":1620128200744,"results":"70","hashOfConfig":"62"},{"size":3924,"mtime":1618214743995,"results":"71","hashOfConfig":"62"},{"size":3780,"mtime":1618214743984,"results":"72","hashOfConfig":"62"},{"size":3568,"mtime":1618214743995,"results":"73","hashOfConfig":"62"},{"size":882,"mtime":1622032277993,"results":"74","hashOfConfig":"62"},{"size":539,"mtime":1612687906738,"results":"75","hashOfConfig":"62"},{"size":538,"mtime":1613898525671,"results":"76","hashOfConfig":"62"},{"size":619,"mtime":1613566229837,"results":"77","hashOfConfig":"62"},{"size":549,"mtime":1617520314217,"results":"78","hashOfConfig":"62"},{"size":595,"mtime":1617520314217,"results":"79","hashOfConfig":"62"},{"size":534,"mtime":1613566165128,"results":"80","hashOfConfig":"62"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},"1v74pqf",{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"83"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"83"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"83"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"83"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"83"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"83"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"83"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"83"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"83"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"83"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"83"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"83"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},"1nlkz6p",{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"145"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"138"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"138"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"138"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"138"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"138"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"138"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"138"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"138"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"138"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"138"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"138"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},"C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\index.tsx",[],["177","178"],"C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\reportWebVitals.ts",[],"C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\App.tsx",[],"C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\bundle\\DrillData\\DrillData.tsx",["179","180","181","182","183","184","185","186","187","188"],"C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\services\\exposureSocket.ts",["189"],"/** @format */\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { getIO, initIO, unsubscribeIO } from './socketIo';\r\n\r\nconst useWebsocket = (roomID: string) => {\r\n  useEffect(() => {\r\n    initIO(roomID);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const io = getIO();\r\n    io.on('exposure-message', onCheckInRecived);\r\n  }, []);\r\n\r\n  const [receivedMessage, setReceivedMessage] = useState<any>();\r\n\r\n  const onCheckInRecived = (message: any) => {\r\n    setReceivedMessage(message);\r\n  };\r\n  return [receivedMessage];\r\n};\r\n\r\nconst unsubscribe = () => {\r\n  unsubscribeIO();\r\n}\r\n\r\nexport {useWebsocket, unsubscribe}\r\n\r\n\r\n","C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\instances\\i18next.js",["190","191"],"// import i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\nimport { default as i18n } from \"i18next\";\r\nimport Backend from \"i18next-http-backend\";\r\nimport LanguageDetector from \"i18next-browser-languagedetector\";\r\n// don't want to use this?\r\n// have a look at the Quick start guide\r\n// for passing in lng and translations on init\r\n\r\n/*  HOW TO USE IN COMPONENTS:\r\n      1. Add a translation here in the wanted language json\r\n         name:\"שם\"\r\n      2. In the component to want to translate something, add the useTranslation hook\r\n         import {useTranslation} from 'react-i18next'\r\n      3. Create a const to handle the translation\r\n         const {t} = useTranslation();\r\n      4. Send the name of the translation\r\n         t(\"name\");\r\n\r\n    Example for interpolating value in translation:\r\n    \"Name\": {\"1\":\"שלום, {{username}}\"}\r\n*/\r\nconst Languages = [\"he\", \"en\"];\r\n\r\nconst resources = {\r\n  he: {\r\n    translation: {\r\n      clear: \"נקה תחנה\",\r\n      hits: \"פגיעות\",\r\n      login_header: \"הצמד מכשיר להתקן בכניסה למסלול או בחר מסלול\",\r\n      lane: \"מסלול\",\r\n      login: \"התחבר\",\r\n      password: \"סיסמא\",\r\n      dashboard_header: \"בחר רחוב / בית\",\r\n      score: \"ציון\",\r\n      executionTime: \"זמן ביצוע\",\r\n      destructions: \"השמדות\",\r\n      exposure: \"חשיפה\",\r\n      trainees: \"מתאמנים:\",\r\n      start_drill: \"הפעל ►\",\r\n      stop_drill: \"עצור ■\",\r\n      loading_drill: \"טוען\",\r\n      debug_header: \"בחר קטגוריה\",\r\n      debug_welcome: \"דיבאג\",\r\n      exposures: \"מצלמות חשיפה\",\r\n      targets: \"מטרות\",\r\n      soldiers: \"חיילים\",\r\n      drills: \"תרגילים\",\r\n      device_Id: \"מזהה\",\r\n      lane_id: \"מסלול\",\r\n      target_condition: \"מצב מטרה\",\r\n      search: \"🔍 חיפוש\",\r\n      debug_targets_header: \"מטרות\",\r\n      debug_exposures_header: \"מצלמות חשיפה\",\r\n      current_exposure: \"חשיפה\",\r\n      cumulative_exposure: \"אחוז חשיפה\",\r\n      soldier_id: \"מזהה\",\r\n      soldier_name: \"שם\",\r\n      debug_soldiers_header: \"חיילים\",\r\n      buzzer_id: \"באזר\",\r\n      debug_drills_header: \"תרגילים\",\r\n      drill_number: \"מספר תרגיל\",\r\n      duration: \"משך תרגיל\",\r\n      start_time: \"תחילת תרגיל\",\r\n      stop_time: \"סיום תרגיל\",\r\n      dead_targets: \"מטרות מתות\",\r\n      living_targets: \"מטרות חיות\",\r\n      total_targets: \"כמות מטרות\",\r\n      buzzer_id: \"מספר באזר\",\r\n    },\r\n  },\r\n  en: {\r\n    translation: {\r\n      clear: \"Clear station\",\r\n      hits: \"Hits\",\r\n      login_header: \"show your device of select lane\",\r\n      lane: \"Lane\",\r\n      login: \"Log in\",\r\n      password: \"Password\",\r\n      dashboard_header: \"Select house / street\",\r\n      score: \"score\",\r\n      executionTime: \"Execution Time\",\r\n      destructions: \"Destructions\",\r\n      exposure: \"Exposure\",\r\n      trainees: \"Trainees:\",\r\n      start_drill: \"Start ►\",\r\n      stop_drill: \"Stop ■\",\r\n      loading_drill: \"Loading\",\r\n      debug_header: \"select a category\",\r\n      debug_welcome: \"Debug\",\r\n      exposures: \"Exposure cameras\",\r\n      targets: \"Targets\",\r\n      soldiers: \"Soldiers\",\r\n      drills: \"Drills\",\r\n      device_Id: \"ID\",\r\n      lane_id: \"Lane\",\r\n      target_condition: \"Target State\",\r\n      search: \"🔍 Search\",\r\n      debug_targets_header: \"Targets\",\r\n      debug_exposures_header: \"Exposures\",\r\n      current_exposure: \"Exposure\",\r\n      cumulative_exposure: \"C. Exposure\",\r\n      soldier_id: \"Soldier ID\",\r\n      soldier_name: \"Soldier Name\",\r\n      debug_soldiers_header: \"Soldiers\",\r\n      buzzer_id: \"Buzzer ID\",\r\n      debug_drills_header: \"Drills\",\r\n      drill_number: \"Drill Number\",\r\n      duration: \"Duration\",\r\n      start_time: \"start Time\",\r\n      stop_time: \"Stop Time\",\r\n      dead_targets: \"Dead Targets\",\r\n      total_targets: \"Total Targets\",\r\n      living_targets: \"Living Targets\",\r\n      buzzer_id: \"Buzzer id\",\r\n    },\r\n  },\r\n};\r\n\r\ni18n\r\n  // load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\r\n  // learn more: https://github.com/i18next/i18next-http-backend\r\n  .use(Backend)\r\n  // detect user language\r\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\r\n  .use(LanguageDetector)\r\n  // pass the i18n instance to react-i18next.\r\n  .use(initReactI18next)\r\n  // init i18next\r\n  // for all options read: https://www.i18next.com/overview/configuration-options\r\n  .init({\r\n    fallbackLng: \"he\",\r\n    debug: true,\r\n    whitelist: Languages,\r\n    resources,\r\n    lng: \"he\",\r\n    interpolation: {\r\n      escapeValue: false, // not needed for react as it escapes by default\r\n    },\r\n  });\r\n\r\nexport default i18n;\r\n",["192","193"],"C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\bundle\\Login\\Login.tsx",[],"C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\services\\socketIo.ts",["194","195"],"import React from 'react';\r\nimport constants from '../lib/constants';\r\nconst io = require('socket.io-client');\r\nlet socket: any;\r\nvar roomName;\r\nconst initIO = (roomName: string) => {\r\n\tif (!socket) {\r\n\t\troomName = roomName\r\n\t\tsocket = io.connect(constants.BULLET_BE_URL_BEGINNING, {\r\n\t\t\tquery: { room: roomName },\r\n\t\t});\r\n\t}\r\n};\r\n\r\nconst getIO = () => {\r\n\treturn socket;\r\n};\r\n\r\nconst unsubscribeIO = () => {\r\n\tconsole.log(\"im in unsubscribeIO\");\r\n\tsocket.removeAllListeners(roomName);\r\n}\r\n\r\nexport { initIO, getIO, unsubscribeIO };\r\n","C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\lib\\constants.js",[],"C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\services\\keepAliveSocket.ts",["196"],"/** @format */\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { getIO, initIO } from './socketIo';\r\n\r\nconst useWebsocket = (roomID:string) => {\r\n  useEffect(() => {\r\n    initIO(roomID);\r\n  }, []);\r\n  useEffect(() => {\r\n    const io = getIO();\r\n    io.on('keep-alive-message', onCheckInRecived);\r\n  }, []);\r\n  const [receivedMessage, setReceivedMessage] = useState<any>();\r\n  const onCheckInRecived = (message: any) => {\r\n    setReceivedMessage(message);\r\n  };\r\n  return [receivedMessage];\r\n};\r\n\r\nexport default useWebsocket;\r\n\r\n\r\n","C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\bundle\\Dashboard\\Dashboard.tsx",[],"C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\bundle\\TimerComponent\\TimerComponent.tsx",["197"],"import { FC, useEffect, useRef, useState } from 'react';\r\nimport './TimerComponent.css';\r\nimport React from 'react';\r\nimport Timer from 'react-compound-timer'\r\nimport ITimer from '../../Interfaces/ITimer'\r\n\r\nconst TimerComponent: FC<ITimer> = (props: ITimer) => {\r\n    const stopwatchControl = useRef(null);\r\n\r\n    useEffect(() => {\r\n        changeTimerState(props.command);\r\n\r\n    }, [props.command, props.startTime]);\r\n\r\n    const changeTimerState = (timerState: string) => {\r\n        switch (timerState) {\r\n            case \"start\":\r\n                stopwatchControl.current.start()\r\n                break;\r\n            case \"stop\":\r\n                stopwatchControl.current.stop()\r\n                break;\r\n            case \"reset\":\r\n                stopwatchControl.current.reset();\r\n                break;\r\n            default: console.log(\"error with stopwatch\")\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div key={props.startTime}>\r\n            <Timer\r\n                initialTime={props.startTime}\r\n                lastUnit=\"m\"\r\n                startImmediately={false}\r\n                formatValue={(value) => `${(value < 10 ? `0${value}` : value)}`}\r\n            >\r\n                {(control) => {\r\n                    stopwatchControl.current = control\r\n                    return (\r\n                        <React.Fragment>\r\n                            <Timer.Minutes />:\r\n                            <Timer.Seconds />\r\n                        </React.Fragment>\r\n                    )\r\n                }}\r\n            </Timer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TimerComponent;\r\n","C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\services\\checkOutSocket.ts",["198"],"/** @format */\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { getIO, initIO } from './socketIo';\r\n\r\nconst useWebsocket = (roomID:string) => {\r\n  useEffect(() => {\r\n    initIO(roomID);\r\n  }, []);\r\n  useEffect(() => {\r\n    const io = getIO();\r\n    io.on('check-out-message', onCheckOutRecived);\r\n  }, []);\r\n  const [receivedMessage, setReceivedMessage] = useState<any>();\r\n  const onCheckOutRecived = (message: any) => {\r\n    setReceivedMessage(message);\r\n  };\r\n  return [receivedMessage];\r\n};\r\n\r\nexport default useWebsocket;\r\n\r\n","C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\services\\checkInSocket.ts",["199"],"/** @format */\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { getIO, initIO } from './socketIo';\r\n\r\nconst useCheckInWebsocket = (roomID:string) => {\r\n  useEffect(() => {\r\n    initIO(roomID);\r\n  }, []);\r\n  useEffect(() => {\r\n    const io = getIO();\r\n    io.on('check-in-message', onCheckInRecived);\r\n  }, []);\r\n  const [receivedMessage, setReceivedMessage] = useState<any>();\r\n  const onCheckInRecived = (message: any) => {\r\n    setReceivedMessage(message);\r\n  };\r\n  return [receivedMessage];\r\n};\r\n\r\nexport default useCheckInWebsocket;\r\n\r\n","C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\services\\changeDrillStateSocket.ts",["200"],"/** @format */\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { getIO, initIO } from './socketIo';\r\n\r\nconst useChangeDrillStateWebsocket = (roomID:string) => {\r\n  useEffect(() => {\r\n    initIO(roomID);\r\n  }, []);\r\n  useEffect(() => {\r\n    const io = getIO();\r\n    io.on('change-drill-state-message', onChangeDrillStateRecived);\r\n  }, []);\r\n  const [receivedMessage, setReceivedMessage] = useState<any>();\r\n  const onChangeDrillStateRecived = (message: any) => {\r\n    setReceivedMessage(message);\r\n  };\r\n  return [receivedMessage];\r\n};\r\n\r\nexport default useChangeDrillStateWebsocket;\r\n\r\n","C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\bundle\\Debug\\Debug.tsx",["201"],"import { FC, useEffect } from 'react';\r\nimport './Debug.css';\r\nimport { useTranslation } from 'react-i18next';\r\nimport React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport constants from '../../lib/constants';\r\n\r\ntype IndexProps = RouteComponentProps<{}, {}>;\r\n\r\nconst Debug: FC<IndexProps> = ({ location }) => {\r\n    const { t } = useTranslation();\r\n    const history = useHistory();\r\n    const params = location.state as any\r\n\r\n    const debuggingCategories = [\r\n        { icon: \"📷\", text: \"exposures\", auth: constants.AUTH_EXPOSURE },\r\n        { icon: \"🎯\", text: \"targets\", auth: constants.AUTH_TARGETS },\r\n        { icon: \"👥\", text: \"soldiers\", auth: constants.AUTH_SOLDIERS },\r\n        { icon: \"📋\", text: \"drills\", auth: constants.AUTH_DRILLS }];\r\n\r\n    useEffect(() => {\r\n        if (!params || params.authentication !== constants.AUTH_DEBUG) {\r\n            console.log(\"not autherized. moving back to login.\");\r\n            history.push({ pathname: '/login' })\r\n        }\r\n    }, []);\r\n\r\n    const categorySelected = (category) => {\r\n        console.log(\"category selected\", category);\r\n        history.push({\r\n            pathname: category.text,\r\n            state: { authentication: category.auth }\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"Debug\">\r\n            <h1 className=\"header\">{t(\"debug_welcome\")}</h1>\r\n            <h1 className=\"header\">{t(\"debug_header\")}</h1>\r\n            <div className=\"categories-container\">\r\n                {debuggingCategories.map((category, categoryIndex) =>\r\n\r\n                    <div className=\"category\" key={categoryIndex} onClick={() => categorySelected(category)}>\r\n                        <div className=\"category-icon\"> {t(category.icon)}</div>\r\n                        <div className=\"category-text\"> {t(category.text)}</div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Debug;\r\n","C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\bundle\\Debug\\DebugTargets\\DebugTargets.tsx",["202"],"import { FC, useEffect, useState } from 'react';\r\nimport './DebugTargets.css';\r\nimport { useTranslation } from 'react-i18next';\r\nimport React from 'react';\r\nimport axios from 'axios';\r\nimport constants from '../../../lib/constants';\r\nimport ITarget from '../../../Interfaces/ITarget';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\n\r\ntype IndexProps = RouteComponentProps<{}, {}>;\r\n\r\nconst DebugTargets: FC<IndexProps> = ({ location }) => {\r\n    const { t } = useTranslation();\r\n    const history = useHistory();\r\n    const params = location.state as any\r\n    const [targetsData, setTargetsData] = useState<ITarget[]>([]);\r\n\r\n    useEffect(() => {\r\n        if (!params || params.authentication !== constants.AUTH_TARGETS) {\r\n            console.log(\"not autherized. moving back to login.\");\r\n            history.push({ pathname: '/login' })\r\n        }\r\n        getTargetsData();\r\n    }, []);\r\n\r\n    const getTargetsData = async () => {\r\n        let url = constants.BULLET_BE_URL_BEGINNING + \"api/debug/getTargetsDebugData\";\r\n        var res = await axios.post(url, {});\r\n        console.log(res);\r\n        setTargetsData(res.data);\r\n    }\r\n\r\n    const filter = () => {\r\n        var input, filter, table, tr, td, i, txtValue;\r\n        input = document.getElementById(\"myInput\");\r\n        filter = input.value.toUpperCase();\r\n        table = document.getElementById(\"myTable\");\r\n        tr = table.getElementsByTagName(\"tr\");\r\n\r\n        // Loop through all table rows, and hide those who don't match the search query\r\n        for (i = 0; i < tr.length; i++) {\r\n            td = tr[i].getElementsByTagName(\"td\");\r\n\r\n            if (td.length === 0) {\r\n                continue;\r\n            }\r\n            txtValue = Array.prototype.slice.call(td).map(elem =>\r\n                elem.textContent).join(\"\");\r\n\r\n            if (txtValue.toUpperCase().indexOf(filter) > -1) {\r\n                tr[i].style.display = \"\";\r\n            } else {\r\n                tr[i].style.display = \"none\";\r\n            }\r\n        }\r\n    }\r\n\r\n    const getClassName = (timeRecieved) => {\r\n        if (!timeRecieved) {\r\n            return \"gray\";\r\n        }\r\n\r\n        let currentMillis = Date.now();\r\n        let passedSeconds = (currentMillis - timeRecieved) / 1000;\r\n\r\n        if (passedSeconds < 5)\r\n            return \"green\";\r\n        if (passedSeconds < 60)\r\n            return \"orange\";\r\n        return \"red\";\r\n    }\r\n\r\n    return (\r\n        <div className=\"Debug\">\r\n            <h1 className=\"header\">{t(\"debug_targets_header\")}</h1>\r\n            <input type=\"text\" id=\"myInput\" onKeyUp={() => filter()} placeholder={t(\"search\")}></input>\r\n            <div className=\"table-body\">\r\n                <table id=\"myTable\">\r\n                    <thead >\r\n                        <tr className=\"header\" key=\"headers\">\r\n                            <th >{t(\"device_Id\")}</th>\r\n                            <th >{t(\"lane_id\")}</th>\r\n                            <th >{t(\"hits\")}</th>\r\n                            <th >{t(\"target_condition\")}</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {targetsData.map((target, targetIndex) =>\r\n                            <tr className={getClassName(target.timeRecieved)} key={targetIndex}>\r\n                                <td key={targetIndex + target.targetID + \"\"}>{target.targetID}</td>\r\n                                <td key={targetIndex + target.laneID + \"\"}>{target.laneID}</td>\r\n                                <td key={targetIndex + target.hitCount + \"\"}>{target.hitCount}</td>\r\n                                <td key={targetIndex + target.state + \"\"}>{target.state}</td>\r\n                            </tr>\r\n                        )}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DebugTargets;\r\n","C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\bundle\\Debug\\DebugExposures\\DebugExposures.tsx",["203"],"import { FC, useEffect, useState } from 'react';\r\nimport './DebugExposures.css';\r\nimport { useTranslation } from 'react-i18next';\r\nimport React from 'react';\r\nimport axios from 'axios';\r\nimport constants from '../../../lib/constants';\r\nimport IExposure from '../../../Interfaces/IExposure';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\n\r\ntype IndexProps = RouteComponentProps<{}, {}>;\r\nconst DebugExposures: FC<IndexProps> = ({ location }) => {\r\n    const { t } = useTranslation();\r\n    const history = useHistory();\r\n    const params = location.state as any\r\n    const [exposuesData, setExposuresData] = useState<IExposure[]>([]);\r\n\r\n    useEffect(() => {\r\n        if (!params || params.authentication !== constants.AUTH_EXPOSURE) {\r\n            console.log(\"not autherized. moving back to login.\");\r\n            history.push({ pathname: '/login' })\r\n        }\r\n        getTargetsData();\r\n    }, []);\r\n\r\n    const getTargetsData = async () => {\r\n        let url = constants.BULLET_BE_URL_BEGINNING + \"api/debug/getExposuresDebugData\";\r\n        var res = await axios.post(url, {});\r\n        console.log(res);\r\n        setExposuresData(res.data);\r\n    }\r\n\r\n    const myFunction = () => {\r\n        // Declare variables\r\n        var input, filter, table, tr, td, i, txtValue;\r\n        input = document.getElementById(\"myInput\");\r\n        filter = input.value.toUpperCase();\r\n        table = document.getElementById(\"myTable\");\r\n        tr = table.getElementsByTagName(\"tr\");\r\n\r\n        // Loop through all table rows, and hide those who don't match the search query\r\n        for (i = 0; i < tr.length; i++) {\r\n            td = tr[i].getElementsByTagName(\"td\");\r\n\r\n            if (td.length === 0) {\r\n                continue;\r\n            }\r\n            txtValue = Array.prototype.slice.call(td).map(elem =>\r\n                elem.textContent).join(\"\");\r\n\r\n            if (txtValue.toUpperCase().indexOf(filter) > -1) {\r\n                tr[i].style.display = \"\";\r\n            } else {\r\n                tr[i].style.display = \"none\";\r\n            }\r\n        }\r\n    }\r\n\r\n    const getClassName = (timeRecieved) => {\r\n        if (!timeRecieved) {\r\n            return \"gray\";\r\n        }\r\n\r\n        let currentMillis = Date.now();\r\n        let passedSeconds = (currentMillis - timeRecieved) / 1000;\r\n\r\n        if (passedSeconds < 5)\r\n            return \"green\";\r\n        if (passedSeconds < 60)\r\n            return \"orange\";\r\n        return \"red\";\r\n    }\r\n\r\n    return (\r\n        <div className=\"Debug\">\r\n            <h1 className=\"header\">{t(\"debug_exposures_header\")}</h1>\r\n            <input type=\"text\" id=\"myInput\" onKeyUp={() => myFunction()} placeholder={t(\"search\")}></input>\r\n            <div className=\"table-body\">\r\n                <table id=\"myTable\">\r\n                    <thead >\r\n                        <tr className=\"header\" key=\"headers\">\r\n                            <th >{t(\"device_Id\")}</th>\r\n                            <th >{t(\"lane_id\")}</th>\r\n                            <th >{t(\"current_exposure\")}</th>\r\n                            <th >{t(\"cumulative_exposure\")}</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {exposuesData.map((exposure, exposureIndex) =>\r\n                            <tr className={getClassName(exposure.timeRecieved)} key={exposureIndex}>\r\n                                <td key={exposureIndex + \"1\"}>{exposure.exposureID}</td>\r\n                                <td key={exposureIndex + \"2\"}>{exposure.laneID}</td>\r\n                                <td key={exposureIndex + \"3\"}>{exposure.currentExposure}</td>\r\n                                <td key={exposureIndex + \"4\"}>{exposure.cumulativeExposure}</td>\r\n                            </tr>\r\n                        )}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DebugExposures;\r\n","C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\bundle\\Debug\\DebugSoldiers\\DebugSoldiers.tsx",["204"],"import { FC, useEffect, useState } from 'react';\r\nimport './DebugSoldiers.css';\r\nimport { useTranslation } from 'react-i18next';\r\nimport React from 'react';\r\nimport axios from 'axios';\r\nimport constants from '../../../lib/constants';\r\nimport ILoggedInSoldier from '../../../Interfaces/ILoggedInSoldier';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\n\r\ntype IndexProps = RouteComponentProps<{}, {}>;\r\n\r\nconst DebugSoldiers: FC<IndexProps> = ({ location }) => {\r\n    const { t } = useTranslation();\r\n    const history = useHistory();\r\n    const params = location.state as any\r\n    const [soldierssData, setSoldiersData] = useState<ILoggedInSoldier[]>([]);\r\n\r\n    useEffect(() => {\r\n        if (!params || params.authentication !== constants.AUTH_SOLDIERS) {\r\n            console.log(\"not autherized. moving back to login.\");\r\n            history.push({ pathname: '/login' })\r\n        }\r\n        getSoldiersData();\r\n    }, []);\r\n\r\n    const getSoldiersData = async () => {\r\n        let url = constants.BULLET_BE_URL_BEGINNING + \"api/debug/getSoldiersDebugData\";\r\n        var res = await axios.post(url, {});\r\n        console.log(res);\r\n        setSoldiersData(res.data);\r\n    }\r\n\r\n    const filter = () => {\r\n        var input, filter, table, tr, td, i, txtValue;\r\n        input = document.getElementById(\"myInput\");\r\n        filter = input.value.toUpperCase();\r\n        table = document.getElementById(\"myTable\");\r\n        tr = table.getElementsByTagName(\"tr\");\r\n\r\n        // Loop through all table rows, and hide those who don't match the search query\r\n        for (i = 0; i < tr.length; i++) {\r\n            td = tr[i].getElementsByTagName(\"td\");\r\n\r\n            if (td.length === 0) {\r\n                continue;\r\n            }\r\n            txtValue = Array.prototype.slice.call(td).map(elem =>\r\n                elem.textContent).join(\"\");\r\n\r\n            if (txtValue.toUpperCase().indexOf(filter) > -1) {\r\n                tr[i].style.display = \"\";\r\n            } else {\r\n                tr[i].style.display = \"none\";\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"Debug\">\r\n            <h1 className=\"header\">{t(\"debug_soldiers_header\")}</h1>\r\n            <input type=\"text\" id=\"myInput\" onKeyUp={() => filter()} placeholder={t(\"search\")}></input>\r\n            <div className=\"table-body\">\r\n                <table id=\"myTable\">\r\n                    <thead >\r\n                        <tr className=\"header\" key=\"headers\">\r\n                            <th >{t(\"soldier_name\")}</th>\r\n                            <th >{t(\"soldier_id\")}</th>\r\n                            <th >{t(\"lane_id\")}</th>\r\n                            <th >{t(\"buzzer_id\")}</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {soldierssData.map((soldier, soldierIndex) =>\r\n                            <tr key={soldierIndex}>\r\n                                <td key={soldierIndex + soldier.soldierName + \"\"}>{soldier.soldierName}</td>\r\n                                <td key={soldierIndex + soldier.soldierID + \"\"}>{soldier.soldierID}</td>\r\n                                <td key={soldierIndex + soldier.laneID + \"\"}>{soldier.laneID}</td>\r\n                                <td key={soldierIndex + soldier.checkInID + \"\"}>{soldier.checkInID}</td>\r\n                            </tr>\r\n                        )}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DebugSoldiers;\r\n","C:\\Users\\hila.shapira\\bullet app\\back-end\\Bullet\\BulletApp\\src\\bundle\\Debug\\DebugDrills\\DebugDrills.tsx",["205"],"import { FC, useEffect, useState } from 'react';\r\nimport './DebugDrills.css';\r\nimport { useTranslation } from 'react-i18next';\r\nimport React from 'react';\r\nimport axios from 'axios';\r\nimport constants from '../../../lib/constants';\r\nimport IDrill from '../../../Interfaces/IDrill';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\n\r\ntype IndexProps = RouteComponentProps<{}, {}>;\r\n\r\nconst DebugDrills: FC<IndexProps> = ({ location }) => {\r\n    const { t } = useTranslation();\r\n    const history = useHistory();\r\n    const params = location.state as any\r\n    const [DrillsData, setDrillsData] = useState<IDrill[]>([]);\r\n    const headers = [\r\n        \"lane_id\",\r\n        \"drill_number\",\r\n        \"duration\",\r\n        \"start_time\",\r\n        \"stop_time\",\r\n        \"hits\",\r\n        \"exposure\",\r\n        \"dead_targets\",\r\n        \"living_targets\",\r\n        \"total_targets\",\r\n        \"score\"\r\n    ]\r\n    const keys = [\r\n        \"laneID\",\r\n        \"drillNum\",\r\n        \"duration\",\r\n        \"drillStartTime\",\r\n        \"drillStopTime\",\r\n        \"hits\",\r\n        \"exposure\",\r\n        \"deadTargets\",\r\n        \"livingTargets\",\r\n        \"totalTargets\",\r\n        \"score\"\r\n    ];\r\n    useEffect(() => {\r\n        if (!params || params.authentication !== constants.AUTH_DRILLS) {\r\n            console.log(\"not autherized. moving back to login.\");\r\n            history.push({ pathname: '/login' })\r\n        }\r\n        getDrillsData();\r\n    }, []);\r\n\r\n    const getDrillsData = async () => {\r\n        let url = constants.BULLET_BE_URL_BEGINNING + \"api/debug/getDrillsDebugData\";\r\n        var res = await axios.post(url, {});\r\n        console.log(res);\r\n        setDrillsData(res.data);\r\n    }\r\n\r\n    const filter = () => {\r\n        var input, filter, table, tr, td, i, txtValue;\r\n        input = document.getElementById(\"myInput\");\r\n        filter = input.value.toUpperCase();\r\n        table = document.getElementById(\"myTable\");\r\n        tr = table.getElementsByTagName(\"tr\");\r\n\r\n        // Loop through all table rows, and hide those who don't match the search query\r\n        for (i = 0; i < tr.length; i++) {\r\n            td = tr[i].getElementsByTagName(\"td\");\r\n\r\n            if (td.length === 0) {\r\n                continue;\r\n            }\r\n            txtValue = Array.prototype.slice.call(td).map(elem =>\r\n                elem.textContent).join(\"\");\r\n\r\n            if (txtValue.toUpperCase().indexOf(filter) > -1) {\r\n                tr[i].style.display = \"\";\r\n            } else {\r\n                tr[i].style.display = \"none\";\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"Debug\">\r\n            <h1 className=\"header\">{t(\"debug_drills_header\")}</h1>\r\n            <input type=\"text\" id=\"myInput\" onKeyUp={() => filter()} placeholder={t(\"search\")}></input>\r\n            <div className=\"table-body\">\r\n                <table id=\"myTable\">\r\n                    <thead >\r\n                        <tr className=\"header\" key=\"headers\">\r\n                            {headers.map((header, headerIndex) =>\r\n                                <th key={headerIndex}>{t(header)}</th>\r\n                            )}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {DrillsData.map((drill, drillsIndex) =>\r\n                            <tr key={drillsIndex}>\r\n                                {keys.map((drillKey, drillIndex) =>\r\n                                    <td key={drillsIndex + drillIndex + \"\"}>{drill[drillKey]}</td>\r\n                                )}\r\n                            </tr>\r\n                        )}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DebugDrills;\r\n","C:\\Users\\hila.shapira\\hello\\helloChat\\BulletApp\\src\\index.tsx",[],["206","207"],"C:\\Users\\hila.shapira\\hello\\helloChat\\BulletApp\\src\\reportWebVitals.ts",[],"C:\\Users\\hila.shapira\\hello\\helloChat\\BulletApp\\src\\App.tsx",[],"C:\\Users\\hila.shapira\\hello\\helloChat\\BulletApp\\src\\instances\\i18next.js",["208","209"],["210","211"],"C:\\Users\\hila.shapira\\hello\\helloChat\\BulletApp\\src\\bundle\\Dashboard\\Dashboard.tsx",[],"C:\\Users\\hila.shapira\\hello\\helloChat\\BulletApp\\src\\bundle\\Login\\Login.tsx",[],"C:\\Users\\hila.shapira\\hello\\helloChat\\BulletApp\\src\\bundle\\Debug\\Debug.tsx",["212"],"C:\\Users\\hila.shapira\\hello\\helloChat\\BulletApp\\src\\bundle\\DrillData\\DrillData.tsx",["213","214","215","216","217","218","219","220","221","222"],"import { FC, useEffect, useState, useRef } from 'react';\r\nimport './DrillData.css';\r\nimport useCheckInWebsocket from '../../services/checkInSocket';\r\nimport useChangeDrillStateWebsocket from '../../services/changeDrillStateSocket';\r\nimport useCheckOutWebsocket from '../../services/checkOutSocket';\r\nimport { useWebsocket as useExposureWebsocket, unsubscribe } from '../../services/exposureSocket';\r\nimport useKeepAliveWebsocket from '../../services/keepAliveSocket';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport axios from 'axios';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport React from 'react';\r\nimport constants from '../../lib/constants';\r\nimport TimerComponent from '../TimerComponent/TimerComponent'\r\nimport ISoldier from '../../Interfaces/ISoldier'\r\nimport IDrillData from '../../Interfaces/IDrillData';\r\nimport ITimer from '../../Interfaces/ITimer'\r\n\r\ntype StateType = {\r\n    id: number,\r\n    type: number\r\n}\r\nconst colors = {// move to consts\r\n    red: \"#B00020\",\r\n    orange: \"#FF9500\",\r\n    green: \"#27AE60\",\r\n    gray: \"#36383E\"\r\n}\r\n\r\ntype IndexProps = RouteComponentProps<{}, {}, StateType>;\r\n\r\nconst DrillData: FC<IndexProps> = ({ location }) => {\r\n    const { t } = useTranslation();\r\n    const history = useHistory();\r\n    const params = location.state as any\r\n    const laneId = params ? params.laneId : 2;\r\n    const laneName = params ? params.laneName : \"\";\r\n    // consider changing let -> const if room changing not working\r\n    let [receivedCheckInMessage] = useCheckInWebsocket(laneId);\r\n    const [receivedCheckOutMessage] = useCheckOutWebsocket(laneId);\r\n    const [receivedChangeDrillStateMessage] = useChangeDrillStateWebsocket(laneId);\r\n    const [receivedExposureMessage] = useExposureWebsocket(laneId);\r\n    const [receivedKeepAliveMessage] = useKeepAliveWebsocket(laneId);\r\n    const [streetName, setStreetName] = useState<string>();\r\n    const [houseName, setHouseName] = useState<string>();\r\n    const [soldiers, setSoldiersNames] = useState<ISoldier[]>([]);\r\n    const [isDrillRunning, setIsDrillRunning] = useState<boolean>(false);\r\n    const [buttonText, setButtonText] = useState<string>(t(\"start_drill\"));\r\n    const [score, setScore] = useState<number>(0);\r\n    const [hits, setHits] = useState<string>(\"0\");\r\n    const [deadTargets, setDeadTargets] = useState<string>(\"0\");\r\n    const [exposure, setExposure] = useState<number>(0);\r\n    const [scoreBg, setScoreBg] = useState<string>(colors.gray);\r\n    const [timerData, setTimerData] = useState<ITimer>({ command: \"stop\", startTime: 0 });\r\n    const [drillStartTime, setDrillStartTime] = useState<number>();\r\n    const [drillNumber, setDrillNumber] = useState<number>(-1);\r\n    const [totalTargets, setTotalTargets] = useState<string>(\"-1\");\r\n    const firsRow = [{ name: \"score\", style: { width: \"32.4%\", background: scoreBg }, value: score },\r\n    { name: \"executionTime\", style: { width: \"67.6%\" }, value: <TimerComponent command={timerData.command} startTime={timerData.startTime} /> }];\r\n    const secondRow = [{ name: \"hits\", value: hits },\r\n    { name: \"destructions\", value: deadTargets },\r\n    { name: \"exposure\", value: Math.round(exposure) + \"%\" }];\r\n    const [drillDataUpdaterInterval, setDrillDataUpdaterInterval] = useState<any>();\r\n    var recentDrillData: IDrillData;\r\n    var lastDrillTimerId;\r\n\r\n    // consider removing this function\r\n    // useEffect(() => {\r\n    //     [receivedMessage] = useWebsocket(laneId);\r\n    // }, [laneId])\r\n\r\n    useEffect(() => {\r\n        if (!params) {\r\n            console.log(\"error with lane id. moving to login.\");\r\n            history.push({ pathname: '/login' })\r\n        }\r\n        initNames();\r\n        getLaneCheckIn();\r\n        getDrillData();\r\n        return () => {\r\n            unsubscribeSockets();\r\n            removeClientFromDrill();\r\n        }\r\n    }, []);\r\n\r\n    const initNames = async () => {\r\n        let parentName = await getParentName();\r\n\r\n        setStreetName(parentName === null ? laneName : parentName);\r\n        setHouseName(parentName === null ? \"\" : laneName);\r\n    }\r\n\r\n    const getParentName = async () => {\r\n        let url = constants.BULLET_BE_URL_BEGINNING + \"api/dataRequest/getParentName\";\r\n        const parentName = await axios.post(url, { user_id: laneId });\r\n        return parentName.data.name;\r\n    }\r\n\r\n    const getLaneCheckIn = async () => {\r\n        let url = constants.BULLET_BE_URL_BEGINNING + \"api/dataRequest/getLaneCheckIn\";\r\n        const data = await axios.post(url, { lane: laneId });\r\n        let lst = []\r\n        for (let soldier of data.data) {\r\n            lst = [...lst, soldier];\r\n        }\r\n        setSoldiersNames(lst);\r\n    }\r\n\r\n    const getDrillData = async () => {\r\n        let url = constants.BULLET_BE_URL_BEGINNING + \"api/dataRequest/getDrillData\";\r\n        const data = await axios.post(url, { lane_id: laneId });\r\n        console.log(data.data);\r\n        if (data.data.is_drill_relevant) {\r\n            updateDrillData(data.data);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log(receivedCheckInMessage);\r\n        if (!receivedCheckInMessage) { return; }\r\n        let newSoldier = {// move me to helper\r\n            laneID: laneId,\r\n            soldierID: receivedCheckInMessage.soldierID,\r\n            soldierName: receivedCheckInMessage.soldierName\r\n        }\r\n        let lst = [...soldiers, newSoldier];\r\n        setSoldiersNames(lst);\r\n    }, [receivedCheckInMessage]);\r\n\r\n    useEffect(() => {\r\n        console.log(receivedChangeDrillStateMessage);\r\n        if (!receivedChangeDrillStateMessage) { return; }\r\n        // if(receivedChangeDrillStateMessage.drill_state === constants.STOP_DRILL){\r\n        updateDrillData(receivedChangeDrillStateMessage);\r\n        //    let obj = { drillStopTime:\"\",\r\n        //     drillStartTime:\"\",\r\n        //     exposure:\"\",\r\n        //     hits:\"\",\r\n        //     deadTargets:\"\",\r\n        //     duration:\"\"}\r\n        // }\r\n    }, [receivedChangeDrillStateMessage]);\r\n\r\n    useEffect(() => {\r\n        console.log(receivedCheckOutMessage);\r\n        if (!receivedCheckOutMessage) { return; }\r\n        if (receivedCheckOutMessage.removeAllSoldiers) {\r\n            setSoldiersNames([]);\r\n        } else {\r\n            let lst = soldiers.filter((soldier) => {\r\n                return soldier.soldierID !== receivedCheckOutMessage.soldierID;\r\n            });\r\n            setSoldiersNames(lst);\r\n        }\r\n    }, [receivedCheckOutMessage]);\r\n\r\n    useEffect(() => {\r\n        console.log(receivedExposureMessage);\r\n        if (receivedExposureMessage === undefined) { return; }\r\n        if (!isDrillRunning) { return } // use consts instead of numbers\r\n        let res = ((exposure * 200) + Number(receivedExposureMessage.exposure)) / 200;\r\n        if (res > 100) { res = 100 }\r\n        setExposure(res);\r\n\r\n    }, [receivedExposureMessage]);\r\n\r\n    useEffect(() => {\r\n        console.log(receivedKeepAliveMessage);\r\n        if (receivedKeepAliveMessage === undefined) { return; }\r\n        if (receivedKeepAliveMessage.tartarget_hit_counter < hits) {\r\n            console.log(\"oh no... check counter number: \" + receivedKeepAliveMessage.target_hit_counter);\r\n        }\r\n        if (!isDrillRunning) { return }\r\n        setHits(receivedKeepAliveMessage.target_hit_counter);\r\n        setDeadTargets(receivedKeepAliveMessage.dead_targets);\r\n\r\n        if (totalTargets === receivedKeepAliveMessage.dead_targets) {\r\n            stopDrill();\r\n        }\r\n        // let targetStatus = receivedKeepAliveMessage.is_target_alive;\r\n        // if (targetStatus === \"0\") {// if target is dead - consider removing this check\r\n        //     getDeadTargets()\r\n        // }\r\n    }, [receivedKeepAliveMessage]);\r\n\r\n    const clearSoldiresList = async () => {\r\n        setSoldiersNames([]);// missing error ui\r\n        try {\r\n            let url = constants.BULLET_BE_URL_BEGINNING + \"api/checkOut/allSoldiersCheckedOut\";\r\n            await axios.post(url, { laneId: laneId });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const changeDrillCondition = () => {\r\n        if (!isDrillRunning) {\r\n            initValues();\r\n            let obj = { command: \"reset\", startTime: Math.floor(timerData.startTime) }\r\n            setTimerData(obj)\r\n            setButtonText(t(\"loading_drill\"));\r\n            setTimeout(() => {\r\n                startDrill()\r\n            }, 5000);\r\n        }\r\n        else {\r\n            stopDrill();\r\n        }\r\n        postDrillCondition();\r\n    }\r\n\r\n    const startDrill = () => {\r\n        setDrillStartTime(Date.now());\r\n        setIsDrillRunning(!isDrillRunning);\r\n        setDrillTimeout();\r\n        setButtonText(t(\"stop_drill\"));\r\n        setTimerData({ command: \"start\", startTime: Math.floor(0) });\r\n        addNewDrill();\r\n    }\r\n\r\n    const setDrillTimeout = () => {\r\n        lastDrillTimerId = setTimeout(() => {\r\n            if (isDrillRunning) {\r\n                console.log(\"before stop drill\");\r\n                stopDrill();\r\n            }\r\n        }, constants.DRILL_MAX_DURATION_IN_SECONDS * 1000);\r\n    }\r\n\r\n    const updateDrillData = (drill_data) => {\r\n        let isBEDrillRuning = !drill_data.drillStopTime;//no drillStopTime - drill is still running\r\n\r\n        setDrillStartTime(fixedValue(drill_data.drillStartTime, Date.now()));\r\n        setIsDrillRunning(isBEDrillRuning);\r\n\r\n        setExposure(fixedValue(drill_data.exposure, 0));\r\n        setHits(fixedValue(drill_data.hits, \"0\"));\r\n        setDeadTargets(fixedValue(drill_data.deadTargets, \"0\"));\r\n\r\n        setButtonText(t(isBEDrillRuning ? \"stop_drill\" : \"start_drill\"));\r\n\r\n        let drillPassedSeconds;\r\n        if (isBEDrillRuning) {\r\n            drillPassedSeconds = getPassedSeconds(drill_data.drillStartTime);\r\n        } else {\r\n            drillPassedSeconds = drill_data.duration * 1000;\r\n        }\r\n\r\n        setTimerData({ command: \"start\", startTime: Math.floor(drillPassedSeconds) });\r\n        if (!isBEDrillRuning) {\r\n            setTimerData({ command: \"stop\", startTime: Math.floor(drillPassedSeconds) });\r\n        }\r\n    }\r\n\r\n    const fixedValue = (value, default_value) => {\r\n        if (value === undefined || value === null) {\r\n            return default_value\r\n        }\r\n        else return value;\r\n    }\r\n\r\n    const getPassedSeconds = (start_time) => {\r\n        let startDrillDate = new Date(start_time);\r\n        let startDrillMillis = startDrillDate.getTime();\r\n        let startDrillMillisFixed = fixedValue(startDrillMillis, 0);\r\n        let currentMillis = Date.now();\r\n        let startDrillSeconds = currentMillis - startDrillMillisFixed;\r\n        return startDrillSeconds;\r\n    }\r\n\r\n    const initValues = () => {\r\n        setExposure(0);\r\n        setHits(\"0\");\r\n        setDeadTargets(\"0\");\r\n    }\r\n\r\n    const addNewDrill = async () => {\r\n        try {\r\n            let currentMillis = Date.now();\r\n            let currentDate = new Date(currentMillis);\r\n            let url = constants.BULLET_BE_URL_BEGINNING + \"api/dataRequest/addNewDrill\";\r\n            let resData = await axios.post(url, { laneId: laneId, drillStartTime: currentDate });\r\n\r\n            setDrillNumber(resData.data.drillNumber);\r\n            setTotalTargets(resData.data.totalTargets);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isDrillRunning && drillNumber !== -1) {\r\n            setDrillDataUpdaterInterval(setInterval(() => {\r\n                updateBe()\r\n            }, 5000));\r\n        } else {\r\n            clearInterval(drillDataUpdaterInterval);\r\n        }\r\n    }, [isDrillRunning, drillNumber]);\r\n\r\n    const updateBe = async () => {\r\n        console.log(\"updateBe\");\r\n\r\n        let newDrillData = {\r\n            drill_number: drillNumber,\r\n            hits: hits,\r\n            total_amount_of_dead_targets: deadTargets,\r\n            total_exposure: exposure\r\n        };\r\n        let drillChanges = getDrillDataChanges(newDrillData, recentDrillData)\r\n\r\n        if (isEmpty(drillChanges)) { return; } // if there arent any DrillChanges -> leave\r\n        recentDrillData = newDrillData;\r\n        drillChanges.lane_id = laneId;\r\n        sendDrillDataToServer(drillChanges);\r\n    }\r\n\r\n    const isEmpty = (DrillChanges) => {\r\n        return (DrillChanges.constructor === Object && Object.entries(DrillChanges).length === 0)\r\n    }\r\n\r\n    const sendDrillDataToServer = async (DrillData) => {\r\n        try {\r\n            let url = constants.BULLET_BE_URL_BEGINNING + \"api/dataRequest/updateDrillData\";\r\n            let res = await axios.post(url, DrillData);\r\n            console.log(res);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const getDrillDataChanges = (newDrillData, recentDrillData) => {\r\n        if (!recentDrillData) {\r\n            return newDrillData;\r\n        }\r\n        let drillDataChanges = {};\r\n        for (let key in newDrillData) {\r\n            if (newDrillData[key] !== recentDrillData[key]) {\r\n                drillDataChanges[key] = newDrillData[key];\r\n            }\r\n        }\r\n        return drillDataChanges;\r\n    }\r\n\r\n    const stopDrill = async () => {\r\n        if (lastDrillTimerId) {\r\n            clearTimeout(lastDrillTimerId);\r\n        }\r\n        setButtonText(t(\"start_drill\"));\r\n        let obj = { command: \"stop\", startTime: Math.floor(timerData.startTime) }\r\n        setTimerData(obj);\r\n        initDevices();\r\n        setIsDrillRunning(!isDrillRunning);\r\n        await postDrillData();\r\n    }\r\n\r\n    const initDevices = async () => {\r\n        try {\r\n            let url = constants.BULLET_BE_URL_BEGINNING + \"api/postMethods/initDevices\";\r\n            await axios.post(url, { device_id: laneId });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const postDrillCondition = async () => {\r\n        try {\r\n            let url = constants.BULLET_BE_URL_BEGINNING + \"api/postMethods/changeDrillStatus\";\r\n            await axios.post(url, { lane_id: laneId, target_control: !isDrillRunning ? \"start\" : \"stop\" });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const postDrillData = async () => {\r\n        let drillDuration = getDrillDuration();\r\n        let totalTargets = await getTotalTargets();\r\n        try {\r\n            let obj = {// move me to helper\r\n                MessageType: constants.POST_DRILL_DATA_MESSAGE_TYPE,\r\n                TimeStamp: new Date(),\r\n                LaneID: laneId,\r\n                TrainingTypeID: constants.TRAINING_TYPE_ID,\r\n                SoldierID: \"\",\r\n                DrillStartTime: new Date(drillStartTime),// date()\r\n                DrillEndTime: new Date().toISOString(),// date()\r\n                Duration: drillDuration,// in seconds (double)\r\n                WeaponType: constants.UNREQUIRED_FIELD_VALUE,\r\n                NumOfTargets: +totalTargets, //(int)\r\n                NumOfShots: constants.UNREQUIRED_FIELD_VALUE,\r\n                RedHits: hits,//int\r\n                BlueHits: constants.UNREQUIRED_FIELD_VALUE,\r\n                GreenHits: constants.UNREQUIRED_FIELD_VALUE,\r\n                TargetsDestroyed: +deadTargets,// int\r\n                CleanTargets: 0,//int alive targets - being set in the BE\r\n                DamagePercentage: 0,// double Percentage of the soldier’s damage state\r\n                TopicsResults: constants.UNREQUIRED_FIELD_VALUE,\r\n                Exposure: exposure,\r\n                drill_number: drillNumber\r\n            }\r\n            let url = constants.BULLET_BE_URL_BEGINNING + \"api/postMethods/stopDrill\";\r\n            let soldiersIDs = soldiers.map(soldier =>\r\n                soldier.soldierID);\r\n            let result = await axios.post(url, { obj: obj, soldiersIDs: soldiersIDs });\r\n            console.log(result);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const getDrillDuration = () => {\r\n        let millis = Date.now() - new Date(drillStartTime).getTime();\r\n        var seconds = (millis / 1000).toFixed(1);\r\n        return seconds;\r\n    }\r\n\r\n    const getTotalTargets = async () => {\r\n        let dbData = await axios.post(constants.BULLET_BE_URL_BEGINNING + \"api/dataRequest/getTotalTargets\", { laneId: laneId });\r\n        let totalTargets = dbData.data.total_targets;\r\n        return totalTargets;\r\n    }\r\n\r\n    const unsubscribeSockets = () => {\r\n        console.log(\"im leaving the component...\")\r\n        unsubscribe();\r\n    }\r\n\r\n    const removeClientFromDrill = async () => {\r\n        let dbData = await axios.post(constants.BULLET_BE_URL_BEGINNING + \"api/postMethods/removeClientFromDrill\", { laneId: laneId });\r\n        console.log(dbData);\r\n    }\r\n\r\n    return (\r\n        <div className=\"DrillData\">\r\n            <div className=\"row\">\r\n                <div className=\"column\">\r\n                    <h2 className=\"drill-data-header\">{streetName}</h2>\r\n                    <h5 className=\"second-header\">{houseName}</h5>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"drill-summerize\">\r\n\r\n                {/* make me one */}\r\n                <div className=\"row\">\r\n                    {firsRow.map((item, index) =>\r\n                        <div className=\"values-box\" style={item.style} key={index}>\r\n                            <div className=\"values\">{item.value}</div>\r\n                            <div className=\"item-header\">{t(item.name)}</div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    {secondRow.map((item, index) =>\r\n                        <div className=\"values-box\" key={index}>\r\n                            <div className=\"values\">{item.value}</div>\r\n                            <div className=\"item-header\">{t(item.name)}</div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n                <div className=\"column\">\r\n                    <h5 className=\"soldiers-header\">{t(\"trainees\")} ({soldiers.length})</h5>\r\n                </div>\r\n                <button className=\"button\" onClick={clearSoldiresList}>{t(\"clear\")}</button>\r\n            </div>\r\n\r\n            {/* move me to component */}\r\n            <div className=\"soldiers-container\">\r\n                {soldiers.map((soldier, index) =>\r\n                    <div key={index} className=\"soldier-name\">{soldier.soldierName}</div>\r\n                    // channge me to component instead of div\r\n                )}\r\n            </div>\r\n            <div className=\"fadeout\"></div>\r\n\r\n            <button className={isDrillRunning ? 'stop-drill-btn' : 'start-drill-btn'}\r\n                onClick={changeDrillCondition}>\r\n                {buttonText}\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DrillData;\r\n","C:\\Users\\hila.shapira\\hello\\helloChat\\BulletApp\\src\\bundle\\Debug\\DebugExposures\\DebugExposures.tsx",["223"],"C:\\Users\\hila.shapira\\hello\\helloChat\\BulletApp\\src\\bundle\\Debug\\DebugTargets\\DebugTargets.tsx",["224"],"C:\\Users\\hila.shapira\\hello\\helloChat\\BulletApp\\src\\bundle\\Debug\\DebugDrills\\DebugDrills.tsx",["225"],"C:\\Users\\hila.shapira\\hello\\helloChat\\BulletApp\\src\\bundle\\Debug\\DebugSoldiers\\DebugSoldiers.tsx",["226"],"C:\\Users\\hila.shapira\\hello\\helloChat\\BulletApp\\src\\lib\\constants.js",[],"C:\\Users\\hila.shapira\\hello\\helloChat\\BulletApp\\src\\services\\keepAliveSocket.ts",["227"],"C:\\Users\\hila.shapira\\hello\\helloChat\\BulletApp\\src\\services\\checkOutSocket.ts",["228"],"C:\\Users\\hila.shapira\\hello\\helloChat\\BulletApp\\src\\services\\exposureSocket.ts",["229"],"C:\\Users\\hila.shapira\\hello\\helloChat\\BulletApp\\src\\services\\checkInSocket.ts",["230"],"C:\\Users\\hila.shapira\\hello\\helloChat\\BulletApp\\src\\services\\changeDrillStateSocket.ts",["231"],"C:\\Users\\hila.shapira\\hello\\helloChat\\BulletApp\\src\\services\\socketIo.ts",["232","233"],{"ruleId":"234","replacedBy":"235"},{"ruleId":"236","replacedBy":"237"},{"ruleId":"238","severity":1,"message":"239","line":1,"column":35,"nodeType":"240","messageId":"241","endLine":1,"endColumn":41},{"ruleId":"238","severity":1,"message":"242","line":50,"column":19,"nodeType":"240","messageId":"241","endLine":50,"endColumn":27},{"ruleId":"238","severity":1,"message":"243","line":54,"column":21,"nodeType":"240","messageId":"241","endLine":54,"endColumn":31},{"ruleId":"244","severity":1,"message":"245","line":85,"column":8,"nodeType":"246","endLine":85,"endColumn":10,"suggestions":"247"},{"ruleId":"244","severity":1,"message":"248","line":129,"column":8,"nodeType":"246","endLine":129,"endColumn":32,"suggestions":"249"},{"ruleId":"244","severity":1,"message":"250","line":143,"column":8,"nodeType":"246","endLine":143,"endColumn":41,"suggestions":"251"},{"ruleId":"244","severity":1,"message":"252","line":156,"column":8,"nodeType":"246","endLine":156,"endColumn":33,"suggestions":"253"},{"ruleId":"244","severity":1,"message":"254","line":166,"column":8,"nodeType":"246","endLine":166,"endColumn":33,"suggestions":"255"},{"ruleId":"244","severity":1,"message":"256","line":185,"column":8,"nodeType":"246","endLine":185,"endColumn":34,"suggestions":"257"},{"ruleId":"244","severity":1,"message":"258","line":300,"column":8,"nodeType":"246","endLine":300,"endColumn":37,"suggestions":"259"},{"ruleId":"244","severity":1,"message":"260","line":9,"column":6,"nodeType":"246","endLine":9,"endColumn":8,"suggestions":"261"},{"ruleId":"262","severity":1,"message":"263","line":69,"column":7,"nodeType":"264","messageId":"265","endLine":69,"endColumn":16},{"ruleId":"262","severity":1,"message":"263","line":115,"column":7,"nodeType":"264","messageId":"265","endLine":115,"endColumn":16},{"ruleId":"234","replacedBy":"235"},{"ruleId":"236","replacedBy":"237"},{"ruleId":"238","severity":1,"message":"266","line":1,"column":8,"nodeType":"240","messageId":"241","endLine":1,"endColumn":13},{"ruleId":"267","severity":1,"message":"268","line":8,"column":14,"nodeType":"240","messageId":"269","endLine":8,"endColumn":22},{"ruleId":"244","severity":1,"message":"260","line":9,"column":6,"nodeType":"246","endLine":9,"endColumn":8,"suggestions":"270"},{"ruleId":"238","severity":1,"message":"271","line":1,"column":33,"nodeType":"240","messageId":"241","endLine":1,"endColumn":41},{"ruleId":"244","severity":1,"message":"260","line":9,"column":6,"nodeType":"246","endLine":9,"endColumn":8,"suggestions":"272"},{"ruleId":"244","severity":1,"message":"260","line":9,"column":6,"nodeType":"246","endLine":9,"endColumn":8,"suggestions":"273"},{"ruleId":"244","severity":1,"message":"260","line":9,"column":6,"nodeType":"246","endLine":9,"endColumn":8,"suggestions":"274"},{"ruleId":"244","severity":1,"message":"275","line":27,"column":8,"nodeType":"246","endLine":27,"endColumn":10,"suggestions":"276"},{"ruleId":"244","severity":1,"message":"275","line":25,"column":8,"nodeType":"246","endLine":25,"endColumn":10,"suggestions":"277"},{"ruleId":"244","severity":1,"message":"275","line":24,"column":8,"nodeType":"246","endLine":24,"endColumn":10,"suggestions":"278"},{"ruleId":"244","severity":1,"message":"275","line":25,"column":8,"nodeType":"246","endLine":25,"endColumn":10,"suggestions":"279"},{"ruleId":"244","severity":1,"message":"275","line":50,"column":8,"nodeType":"246","endLine":50,"endColumn":10,"suggestions":"280"},{"ruleId":"234","replacedBy":"281"},{"ruleId":"236","replacedBy":"282"},{"ruleId":"262","severity":1,"message":"263","line":69,"column":7,"nodeType":"264","messageId":"265","endLine":69,"endColumn":16},{"ruleId":"262","severity":1,"message":"263","line":115,"column":7,"nodeType":"264","messageId":"265","endLine":115,"endColumn":16},{"ruleId":"234","replacedBy":"281"},{"ruleId":"236","replacedBy":"282"},{"ruleId":"244","severity":1,"message":"275","line":27,"column":8,"nodeType":"246","endLine":27,"endColumn":10,"suggestions":"283"},{"ruleId":"238","severity":1,"message":"239","line":1,"column":35,"nodeType":"240","messageId":"241","endLine":1,"endColumn":41},{"ruleId":"238","severity":1,"message":"242","line":50,"column":19,"nodeType":"240","messageId":"241","endLine":50,"endColumn":27},{"ruleId":"238","severity":1,"message":"243","line":54,"column":21,"nodeType":"240","messageId":"241","endLine":54,"endColumn":31},{"ruleId":"244","severity":1,"message":"245","line":85,"column":8,"nodeType":"246","endLine":85,"endColumn":10,"suggestions":"284"},{"ruleId":"244","severity":1,"message":"248","line":129,"column":8,"nodeType":"246","endLine":129,"endColumn":32,"suggestions":"285"},{"ruleId":"244","severity":1,"message":"250","line":143,"column":8,"nodeType":"246","endLine":143,"endColumn":41,"suggestions":"286"},{"ruleId":"244","severity":1,"message":"252","line":156,"column":8,"nodeType":"246","endLine":156,"endColumn":33,"suggestions":"287"},{"ruleId":"244","severity":1,"message":"254","line":166,"column":8,"nodeType":"246","endLine":166,"endColumn":33,"suggestions":"288"},{"ruleId":"244","severity":1,"message":"256","line":185,"column":8,"nodeType":"246","endLine":185,"endColumn":34,"suggestions":"289"},{"ruleId":"244","severity":1,"message":"258","line":300,"column":8,"nodeType":"246","endLine":300,"endColumn":37,"suggestions":"290"},{"ruleId":"244","severity":1,"message":"275","line":24,"column":8,"nodeType":"246","endLine":24,"endColumn":10,"suggestions":"291"},{"ruleId":"244","severity":1,"message":"275","line":25,"column":8,"nodeType":"246","endLine":25,"endColumn":10,"suggestions":"292"},{"ruleId":"244","severity":1,"message":"275","line":50,"column":8,"nodeType":"246","endLine":50,"endColumn":10,"suggestions":"293"},{"ruleId":"244","severity":1,"message":"275","line":25,"column":8,"nodeType":"246","endLine":25,"endColumn":10,"suggestions":"294"},{"ruleId":"244","severity":1,"message":"260","line":9,"column":6,"nodeType":"246","endLine":9,"endColumn":8,"suggestions":"295"},{"ruleId":"244","severity":1,"message":"260","line":9,"column":6,"nodeType":"246","endLine":9,"endColumn":8,"suggestions":"296"},{"ruleId":"244","severity":1,"message":"260","line":9,"column":6,"nodeType":"246","endLine":9,"endColumn":8,"suggestions":"297"},{"ruleId":"244","severity":1,"message":"260","line":9,"column":6,"nodeType":"246","endLine":9,"endColumn":8,"suggestions":"298"},{"ruleId":"244","severity":1,"message":"260","line":9,"column":6,"nodeType":"246","endLine":9,"endColumn":8,"suggestions":"299"},{"ruleId":"238","severity":1,"message":"266","line":1,"column":8,"nodeType":"240","messageId":"241","endLine":1,"endColumn":13},{"ruleId":"267","severity":1,"message":"268","line":8,"column":14,"nodeType":"240","messageId":"269","endLine":8,"endColumn":22},"no-native-reassign",["300"],"no-negated-in-lhs",["301"],"@typescript-eslint/no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'setScore' is assigned a value but never used.","'setScoreBg' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getDrillData', 'getLaneCheckIn', 'history', 'initNames', 'params', and 'removeClientFromDrill'. Either include them or remove the dependency array.","ArrayExpression",["302"],"React Hook useEffect has missing dependencies: 'laneId' and 'soldiers'. Either include them or remove the dependency array.",["303"],"React Hook useEffect has a missing dependency: 'updateDrillData'. Either include it or remove the dependency array.",["304"],"React Hook useEffect has a missing dependency: 'soldiers'. Either include it or remove the dependency array.",["305"],"React Hook useEffect has missing dependencies: 'exposure' and 'isDrillRunning'. Either include them or remove the dependency array.",["306"],"React Hook useEffect has missing dependencies: 'hits', 'isDrillRunning', 'stopDrill', and 'totalTargets'. Either include them or remove the dependency array.",["307"],"React Hook useEffect has missing dependencies: 'drillDataUpdaterInterval' and 'updateBe'. Either include them or remove the dependency array.",["308"],"React Hook useEffect has a missing dependency: 'roomID'. Either include it or remove the dependency array.",["309"],"no-dupe-keys","Duplicate key 'buzzer_id'.","ObjectExpression","unexpected","'React' is defined but never used.","no-self-assign","'roomName' is assigned to itself.","selfAssignment",["310"],"'useState' is defined but never used.",["311"],["312"],["313"],"React Hook useEffect has missing dependencies: 'history' and 'params'. Either include them or remove the dependency array.",["314"],["315"],["316"],["317"],["318"],["300"],["301"],["319"],["320"],["321"],["322"],["323"],["324"],["325"],["326"],["327"],["328"],["329"],["330"],["331"],["332"],["333"],["334"],["335"],"no-global-assign","no-unsafe-negation",{"desc":"336","fix":"337"},{"desc":"338","fix":"339"},{"desc":"340","fix":"341"},{"desc":"342","fix":"343"},{"desc":"344","fix":"345"},{"desc":"346","fix":"347"},{"desc":"348","fix":"349"},{"desc":"350","fix":"351"},{"desc":"350","fix":"352"},{"desc":"350","fix":"353"},{"desc":"350","fix":"354"},{"desc":"350","fix":"355"},{"desc":"356","fix":"357"},{"desc":"356","fix":"358"},{"desc":"356","fix":"359"},{"desc":"356","fix":"360"},{"desc":"356","fix":"361"},{"desc":"356","fix":"362"},{"desc":"336","fix":"363"},{"desc":"338","fix":"364"},{"desc":"340","fix":"365"},{"desc":"342","fix":"366"},{"desc":"344","fix":"367"},{"desc":"346","fix":"368"},{"desc":"348","fix":"369"},{"desc":"356","fix":"370"},{"desc":"356","fix":"371"},{"desc":"356","fix":"372"},{"desc":"356","fix":"373"},{"desc":"350","fix":"374"},{"desc":"350","fix":"375"},{"desc":"350","fix":"376"},{"desc":"350","fix":"377"},{"desc":"350","fix":"378"},"Update the dependencies array to be: [getDrillData, getLaneCheckIn, history, initNames, params, removeClientFromDrill]",{"range":"379","text":"380"},"Update the dependencies array to be: [laneId, receivedCheckInMessage, soldiers]",{"range":"381","text":"382"},"Update the dependencies array to be: [receivedChangeDrillStateMessage, updateDrillData]",{"range":"383","text":"384"},"Update the dependencies array to be: [receivedCheckOutMessage, soldiers]",{"range":"385","text":"386"},"Update the dependencies array to be: [exposure, isDrillRunning, receivedExposureMessage]",{"range":"387","text":"388"},"Update the dependencies array to be: [hits, isDrillRunning, receivedKeepAliveMessage, stopDrill, totalTargets]",{"range":"389","text":"390"},"Update the dependencies array to be: [isDrillRunning, drillNumber, updateBe, drillDataUpdaterInterval]",{"range":"391","text":"392"},"Update the dependencies array to be: [roomID]",{"range":"393","text":"394"},{"range":"395","text":"394"},{"range":"396","text":"394"},{"range":"397","text":"394"},{"range":"398","text":"394"},"Update the dependencies array to be: [history, params]",{"range":"399","text":"400"},{"range":"401","text":"400"},{"range":"402","text":"400"},{"range":"403","text":"400"},{"range":"404","text":"400"},{"range":"405","text":"400"},{"range":"406","text":"380"},{"range":"407","text":"382"},{"range":"408","text":"384"},{"range":"409","text":"386"},{"range":"410","text":"388"},{"range":"411","text":"390"},{"range":"412","text":"392"},{"range":"413","text":"400"},{"range":"414","text":"400"},{"range":"415","text":"400"},{"range":"416","text":"400"},{"range":"417","text":"394"},{"range":"418","text":"394"},{"range":"419","text":"394"},{"range":"420","text":"394"},{"range":"421","text":"394"},[3895,3897],"[getDrillData, getLaneCheckIn, history, initNames, params, removeClientFromDrill]",[5467,5491],"[laneId, receivedCheckInMessage, soldiers]",[5995,6028],"[receivedChangeDrillStateMessage, updateDrillData]",[6472,6497],"[receivedCheckOutMessage, soldiers]",[6873,6898],"[exposure, isDrillRunning, receivedExposureMessage]",[7724,7750],"[hits, isDrillRunning, receivedKeepAliveMessage, stopDrill, totalTargets]",[11640,11669],"[isDrillRunning, drillNumber, updateBe, drillDataUpdaterInterval]",[217,219],"[roomID]",[201,203],[201,203],[208,210],[217,219],[1071,1073],"[history, params]",[946,948],[958,960],[980,982],[1481,1483],[1071,1073],[3895,3897],[5467,5491],[5995,6028],[6472,6497],[6873,6898],[7724,7750],[11640,11669],[958,960],[946,948],[1481,1483],[980,982],[201,203],[201,203],[217,219],[208,210],[217,219]]